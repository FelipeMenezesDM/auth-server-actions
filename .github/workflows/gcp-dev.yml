name: Build and Deploy to GCP - DEV
on:
  workflow_call:
    secrets:
      GCP_REGION:
        required: true
      GCP_CONTAINER_REGISTRY:
        required: true
      GCP_PROJECT_ID:
        required: true
      GCP_CREDENTIALS:
        required: true
    inputs:
      service:
        type: string
        required: true
      sha:
        type: string
        required: true
      port:
        type: string
        required: true
      min-instance:
        type: string
        required: false
        default: 0
      max-instance:
        type: string
        required: false
        default: 4
      memory:
        type: string
        required: false
        default: 128Mi
      env:
        type: string
        required: false
        default: DEV
env:
  SERVICE: ${{ inputs.service }}-develop
  REGION: ${{ secrets.GCP_REGION }}
  CONTAINER_REGISTRY: ${{ secrets.GCP_CONTAINER_REGISTRY }}
  IMAGE: ${{ secrets.GCP_CONTAINER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ inputs.service }}-develop:${{ inputs.sha }}
  CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
  PORT: ${{ inputs.port }}
  MIN_INSTANCE: ${{ inputs.min-instance }}
  MAX_INSTANCE: ${{ inputs.max-instance }}
  MEMORY: ${{ inputs.memory }}
  APP_ENV: ${{ inputs.env }}
jobs:
  initializing:
    name: Initializing
    runs-on: ubuntu-latest
    steps:
      - run: echo "Initializing..."
  validate-composer:
    needs: initializing
    name: Validate / Composer
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating composer.json and composer-lock.json
        run: composer validate --strict
  validate-composer-cache:
    needs: initializing
    name: Validate / Composer Cache
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating composer cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-
  validate-install-dependencies:
    needs: initializing
    name: Validate / Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating dependencies
        run: composer install --prefer-dist --no-progress
  validate-phpmd:
    needs: initializing
    name: Validate / PHPMD
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Executing PHPMD
        uses: GeneaLabs/action-reviewdog-phpmd@1.0.0
        with:
          github_token: ${{ github.token }}
          level: warning
          reporter: github-check
          standard: cleancode,codesize,controversial,design,naming,unusedcode
          target_directory: app
  test-unit:
    needs:
      - validate-composer
      - validate-composer-cache
      - validate-install-dependencies
      - validate-phpmd
    name: Test / Unit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Installing dependencies
        run: composer install --no-progress
      - name: Gerenate keys
        run: php artisan passport:keys --force
      - name: Run unit tests
        run: composer run test-unit
  test-feature:
    needs:
      - validate-composer
      - validate-composer-cache
      - validate-install-dependencies
      - validate-phpmd
    name: Test / Feature
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Installing dependencies
        run: composer install --no-progress
      - name: Gerenate keys
        run: php artisan passport:keys --force
      - name: Run unit tests
        run: composer run test-feature
  deploy:
    needs:
      - test-unit
      - test-feature
    name: Deploy to DEV
    environment:
      name: DEV
      url: ${{ steps.output.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.CREDENTIALS }}
      - name: Docker Auth
        run: gcloud auth configure-docker ${{ env.CONTAINER_REGISTRY }} --quiet
      - name: Build
        run: docker build -t ${{ env.IMAGE }} . -f app.dockerfile --build-arg APP_ENV=${{ env.APP_ENV }}
      - name: Push
        run: docker push ${{ env.IMAGE }}
      - name: Migrate
        run: docker run --rm --entrypoint sh -i ${{ env.IMAGE }} -c "cat > /auth-gcloud.json && export GOOGLE_APPLICATION_CREDENTIALS=/auth-gcloud.json && php artisan migrate --seed && php artisan make:main-client --with-secrets" < $GOOGLE_APPLICATION_CREDENTIALS
      - name: Deploy
        run: gcloud run deploy ${{ env.SERVICE }} --image ${{ env.IMAGE }} --region ${{ env.REGION }} --memory ${{ env.MEMORY }} --min-instances ${{ env.MIN_INSTANCE }} --max-instances ${{ env.MAX_INSTANCE }} --platform managed --port ${{ env.PORT }} --allow-unauthenticated
      - name: Ouput
        run: echo "url="$(gcloud run services describe ${{ env.SERVICE }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)') >> $GITHUB_OUTPUT
        id: output
  finishing:
    needs: deploy
    name: Finishing
    runs-on: ubuntu-latest
    steps:
      - run: echo "Finished"
