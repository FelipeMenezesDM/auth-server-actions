name: Build and Deploy to GCP - DEV
on:
  workflow_call:
    secrets:
      GCP_CONTAINER_REGISTRY:
        required: true
      GCP_PROJECT_ID_DEV:
        required: true
      GCP_CREDENTIALS_DEV:
        required: true
    inputs:
      service:
        type: string
        required: true
      sha:
        type: string
        required: true
env:
  SERVICE: ${{ inputs.service }}-develop
  CONTAINER_REGISTRY: ${{ secrets.GCP_CONTAINER_REGISTRY }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_DEV }}
  IMAGE: ${{ secrets.GCP_CONTAINER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID_DEV }}/${{ inputs.service }}-develop:${{ inputs.sha }}
  CREDENTIALS: ${{ secrets.GCP_CREDENTIALS_DEV }}
  ENVIRONMENT: DEV
jobs:
  validate-composer:
    name: Validate / Composer
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating composer.json and composer-lock.json
        run: composer validate --strict
  validate-composer-cache:
    name: Validate / Composer Cache
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating composer cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-
  validate-install-dependencies:
    name: Validate / Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating dependencies
        run: composer install --prefer-dist --no-progress
  validate-phpmd:
    name: Validate / PHPMD
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Executing PHPMD
        uses: GeneaLabs/action-reviewdog-phpmd@1.0.0
        with:
          github_token: ${{ github.token }}
          level: warning
          reporter: github-check
          standard: cleancode,codesize,controversial,design,naming,unusedcode
          target_directory: app
  test-unit:
    needs:
      - validate-composer
      - validate-composer-cache
      - validate-install-dependencies
      - validate-phpmd
    name: Test / Unit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Installing dependencies
        run: composer install --no-progress
      - name: Gerenate keys
        run: php artisan passport:keys --force
      - name: Run unit tests
        run: composer run test-unit
  test-feature:
    needs:
      - validate-composer
      - validate-composer-cache
      - validate-install-dependencies
      - validate-phpmd
    name: Test / Feature
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Installing dependencies
        run: composer install --no-progress
      - name: Gerenate keys
        run: php artisan passport:keys --force
      - name: Run unit tests
        run: composer run test-feature
  settings:
    needs:
      - test-unit
      - test-feature
    name: Load application settings
    runs-on: ubuntu-latest
    outputs:
      s: ${{ steps.output.outputs.settings }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Load environment application settings
        id: settings
        uses: fabasoad/data-format-converter-action@main
        with:
          input: ./infra/config/${{ env.ENVIRONMENT }}.yml
          from: yaml
          to: json
      - name: Output settings json
        id: output
        run: echo "settings="${{ steps.settings.outputs.output }} >> $GITHUB_OUTPUT
  deploy:
    needs: settings
    name: Deploy to DEV
    environment:
      name: DEV
      url: ${{ steps.output.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.CREDENTIALS }}
      - name: Docker Auth
        run: gcloud auth configure-docker ${{ env.CONTAINER_REGISTRY }} --quiet
      - name: Build
        run: docker build -t ${{ env.IMAGE }} . -f app.dockerfile --build-arg APP_ENV=${{ env.ENVIRONMENT }}
      - name: Push
        run: docker push ${{ env.IMAGE }}
      - name: Deploy
        run: gcloud run deploy ${{ env.SERVICE }} --image ${{ env.IMAGE }} --region ${{ fromJSON(needs.settings.outputs.s).region }} --memory ${{ fromJSON(needs.settings.outputs.s).scalling.memory }} --min-instances ${{ fromJSON(needs.settings.outputs.s).scalling.min-instances }} --max-instances ${{ fromJSON(needs.settings.outputs.s).scalling.max-instances }} --platform managed --port ${{ fromJSON(needs.settings.outputs.s).port }} --timeout ${{ fromJSON(needs.settings.outputs.s).scalling.timeout }} --set-env-vars "ENABLE_SSL=${{ fromJSON(needs.settings.outputs.s).enable-ssl }}" --execution-environment ${{ fromJSON(needs.settings.outputs.s).execution-environment }} --ingress ${{ fromJSON(needs.settings.outputs.s).ingress }} --cpu ${{ fromJSON(needs.settings.outputs.s).scalling.cpu }} --concurrency ${{ fromJSON(needs.settings.outputs.s).scalling.concurrency }} ${{ (fromJSON(needs.settings.outputs.s).cpu-throttling && '--cpu-throttling') || '--no-cpu-throttling' }} --service-account ${{ env.PROJECT_ID }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com --allow-unauthenticated
      - name: Ouput
        run: echo "url="$(gcloud run services describe ${{ env.SERVICE }} --platform managed --region ${{ fromJSON(needs.settings.outputs.s).region }} --format 'value(status.url)') >> $GITHUB_OUTPUT
        id: output
  custom-bash-command-execution:
    needs:
      - settings
      - deploy
    name: Custom bash command execution
    runs-on: ubuntu-latest
    if: ${{ fromJSON(needs.settings.outputs.s).custom-command != '' }}
    steps:
      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.CREDENTIALS }}
      - name: Docker Auth
        run: gcloud auth configure-docker ${{ env.CONTAINER_REGISTRY }} --quiet
      - name: Execute custom command
        run: docker run --rm --entrypoint sh -i ${{ env.IMAGE }} -c "cat > /auth-gcloud.json && export GOOGLE_APPLICATION_CREDENTIALS=/auth-gcloud.json && ${{ fromJSON(needs.settings.outputs.s).application.custom-bash-command }}" < $GOOGLE_APPLICATION_CREDENTIALS
